import telebot
import threading

from time import sleep
from telebot import types

from config import BOT_TOKEN
from parsing.meta import BAIKAL_DAILY_ID, IRK_RU_ID, CITY_N_ID, BAIKAL_DAILY_URL, IRK_RU_URL, CITY_N_URL
from utils.answers_helper import AnswerHelper
from utils.request_helper import RequestHelper


requestHelper = RequestHelper()
answerHelper = AnswerHelper()

bot = telebot.TeleBot(BOT_TOKEN)

help_message = f"""
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –í—ã–≤–æ–¥ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

/default - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
/get - –í—ã–≤–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
/update_n - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞ —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)

/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ, –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å–≤–µ–∂–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ—Ç —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, –≤–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º, —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º, –±–∞–≥–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å–æ –º–Ω–æ–π, –ø–∏—Å–∞—Ç—å –µ–º—Éüßê: @Lockerio
"""


# def background_task():
#     while True:
#         is_there_newest_news = RequestHelper.background_request()
#
#         all_chat_ids = requestHelper.get_sorted_chat_ids_with_sources_agency_id()
#
#         if is_there_newest_news[BAIKAL_DAILY_ID]:
#             news = requestHelper.get_news(BAIKAL_DAILY_ID)
#             for chat in all_chat_ids[BAIKAL_DAILY_ID]:
#                 bot.send_message(chat, news, parse_mode="html")
#
#         if is_there_newest_news[IRK_RU_ID]:
#             news = requestHelper.get_news(IRK_RU_ID)
#             for chat in all_chat_ids[IRK_RU_ID]:
#                 bot.send_message(chat, news, parse_mode="html")
#
#         if is_there_newest_news[CITY_N_ID]:
#             news = requestHelper.get_news(CITY_N_ID)
#             for chat in all_chat_ids[CITY_N_ID]:
#                 bot.send_message(chat, news, parse_mode="html")
#
#         sleep(3600)
#
#
# background_thread = threading.Thread(target=background_task)
# background_thread.daemon = True
# background_thread.start()


@bot.message_handler(commands=["start"])
def start(message):
    start_message = f"""
<b>–ü—Ä–∏–≤–µ—Ç!</b>
–Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Çü§ñ

–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤.
–õ–∏–±–æ –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.

–õ–∞–¥–Ω–æ, –Ω–µ –±—É–¥—É —Ç–æ–º–∏—Ç—å –í–∞—Å —Ä–µ—á–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ü§ì
–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–π –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏)
"""

    bot.send_message(message.chat.id, start_message, parse_mode="html")
    bot.send_message(message.chat.id, help_message)

    # –ë–∞–≥
    # –ï—Å–ª–∏ —é–∑–µ—Ä –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞, –µ—â–µ —Ä–∞–∑ –µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ SQLAlchemy,
    # –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    #
    # telegram_id = message.from_user.id
    # user_id = requestHelper.create_user(telegram_id, message.chat.id)
    # action = message.json
    # requestHelper.record_user_actions(user_id, action)  # –ë–∞–≥ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–µ


@bot.message_handler(commands=["help"])
def update_n(message):
    bot.send_message(message.chat.id, help_message)

    user_id = requestHelper.get_user(message.from_user.id).id
    action = message.json
    requestHelper.record_user_actions(user_id, action)


@bot.message_handler(commands=["update_n"])
def update_n(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑:", parse_mode="html")

    user_id = requestHelper.get_user(message.from_user.id).id
    action = message.json
    requestHelper.record_user_actions(user_id, action)
    answerHelper.update_user_waiting_n(user_id, True)


@bot.message_handler(commands=["get"])
def get(message):
    user = requestHelper.get_user(message.from_user.id)
    action = message.json
    requestHelper.record_user_actions(user.id, action)

    source_id = user.source_agency_id

    if source_id:
        amount_news_to_show = user.news_amount_to_show

        for news_counter in range(amount_news_to_show):
            news = requestHelper.get_news_desc(user)

            if news:
                formatted_news = answerHelper.format_news(news)
                answerHelper.update_user_amount_of_read_news(user.id,
                                                             requestHelper.get_amount_of_read_news(user.id) + 1)
                bot.send_message(message.chat.id, formatted_news,
                                 parse_mode="html", disable_web_page_preview=True)
            else:
                answerHelper.update_user_amount_of_read_news(user.id, 1)
                bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞")
                bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ '/default' –∏–ª–∏ "
                                                  "–ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω–∏ –≤—ã–ø—É—Å—Ç—è—Ç —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–µ–Ω—å–∫–æ–µüòá")
                break

    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
        bot.send_message(message.chat.id,
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '/default' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—éüòè")


@bot.message_handler(commands=["default"])
def default(message):
    user = requestHelper.get_user(message.from_user.id)
    source_agency_id = user.source_agency_id

    agency = requestHelper.get_agency(source_agency_id)
    if agency:
        bot.send_message(message.chat.id, f"–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {agency.name}", disable_web_page_preview=True)

    agencies = requestHelper.get_agencies()
    agency1 = agencies[0]
    agency2 = agencies[1]
    agency3 = agencies[2]

    mess = f'''
    –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
    
1) <a href="{BAIKAL_DAILY_URL}">{agency1.name}</a> 
{agency1.description}  

2) <a href="{IRK_RU_URL}">{agency2.name}</a> 
{agency2.description}  

3) <a href="{CITY_N_URL}">{agency3.name}</a> 
{agency3.description}
    '''

    buttons = [
        types.InlineKeyboardButton("1", callback_data="default,1"),
        types.InlineKeyboardButton("2", callback_data="default,2"),
        types.InlineKeyboardButton("3", callback_data="default,3")
    ]
    markup = types.InlineKeyboardMarkup([buttons])

    bot.send_message(message.chat.id, mess, parse_mode="html", disable_web_page_preview=True,
                     reply_markup=markup)

    action = message.json
    requestHelper.record_user_actions(user.id, action)


@bot.message_handler(commands=["subscribe"])
def subscribe(message):
    user = requestHelper.get_user(message.from_user.id)

    agencies = requestHelper.get_agencies()
    agency1 = agencies[0]
    agency2 = agencies[1]
    agency3 = agencies[2]

    mess = f'''
    –û—Ç –∫–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:

1) <a href="{BAIKAL_DAILY_URL}">{agency1.name}</a> 
{agency1.description}  

2) <a href="{IRK_RU_URL}">{agency2.name}</a> 
{agency2.description}  

3) <a href="{CITY_N_URL}">{agency3.name}</a> 
{agency3.description}
    '''

    buttons = [
        types.InlineKeyboardButton("1", callback_data="subscribe,1"),
        types.InlineKeyboardButton("2", callback_data="subscribe,2"),
        types.InlineKeyboardButton("3", callback_data="subscribe,3")
    ]
    markup = types.InlineKeyboardMarkup([buttons])

    bot.send_message(message.chat.id, mess, parse_mode="html", disable_web_page_preview=True,
                     reply_markup=markup)

    action = message.json
    requestHelper.record_user_actions(user.id, action)


@bot.message_handler(commands=["unsubscribe"])
def unsubscribe(message):
    user = requestHelper.get_user(message.from_user.id)
    favorites = user.favorites

    if favorites:
        agencies = []
        for favorite in favorites:
            agency_id = favorite.agency_id

            agency = requestHelper.get_agency(agency_id)
            agencies.append(agency)

        mess = f'–û—Ç –∫–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?'

        buttons = [
            types.InlineKeyboardButton(f"{agency.name}", callback_data=f"unsubscribe,{agency.id}")
            for agency in agencies
        ]
        markup = types.InlineKeyboardMarkup([buttons])

        bot.send_message(message.chat.id, mess, parse_mode="html", disable_web_page_preview=True,
                         reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ")

    action = message.json
    requestHelper.record_user_actions(user.id, action)


@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    button_data = call.data.split(",")
    user = requestHelper.get_user(call.from_user.id)
    user_id = user.id

    sender, number = button_data[0], int(button_data[1])

    if sender == "default":
        requestHelper.save_source(call.from_user.id, number)
        answerHelper.update_user_amount_of_read_news(user.id, 1)

        bot.send_message(user.chat_id, "–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    elif sender == "subscribe":
        is_subscriber_already = requestHelper.assert_create_subscription(user_id, number)

        if is_subscriber_already:
            bot.send_message(user.chat_id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∞–≥–µ–Ω—Å—Ç–≤–æ")
        else:
            agency = requestHelper.get_agency(number)
            bot.send_message(user.chat_id, f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {agency.name}")

    elif sender == "unsubscribe":
        agency = requestHelper.get_agency(number)
        requestHelper.delete_favorite(user_id, number)
        bot.send_message(user.chat_id, f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {agency.name}")

    bot.answer_callback_query(call.id)


@bot.message_handler(content_types=["text"])
def text(message):
    chat_id = message.chat.id
    user = requestHelper.get_user(message.from_user.id)

    user_id = user.id

    if answerHelper.is_user_waiting_n(user_id):
        answer = requestHelper.assert_save_n(user_id, message.text)
        if answer[0]:
            answerHelper.update_user_waiting_n(user_id, False)

        bot.send_message(chat_id, answer[1], parse_mode="html")

    else:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞—É—á–∏–ª –º–µ–Ω—è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å –ª—é–¥—å–º–∏üò¢")
        bot.send_message(chat_id, "–Ø –ª–∏—à—å –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º –Ω–æ–≤–æ—Å—Ç–∏")

    action = message.json
    requestHelper.record_user_actions(user_id, action)


bot.polling(none_stop=True)
